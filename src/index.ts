import { app, BrowserWindow, shell, ipcMain } from 'electron';
import isDev from "electron-is-dev";

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
		webPreferences: {
			preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
		},
		frame: false
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();

	mainWindow.webContents.setWindowOpenHandler(({ url }) => {
		shell.openExternal(url);
		return { action: "deny" };
	});

	ipcMain.on("request-minimize-window", () => {
		mainWindow.minimize();
	});
	ipcMain.on("request-toggle-window-maximization", () => {
		if(mainWindow.isMaximized())
			mainWindow.unmaximize()
		else
			mainWindow.maximize();
	});
	ipcMain.on("request-close-window", () => {
		mainWindow.close();
	});
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
//app.on('ready', createWindow);
app.whenReady().then(() => {
	createWindow();

	app.on("activate", () => {
		if(BrowserWindow.getAllWindows().length === 0)
			createWindow();
	});	
	app.on("open-url", (event, url: string) => {
		event.preventDefault();
		shell.openExternal(url);
	});
	app.on('window-all-closed', () => {
		if (process.platform !== 'darwin') {
			app.quit();
		}
	});
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.handle("request-platform-versions", () => {
	const versions = {
		chrome: process.versions["chrome"] as string,
		node: process.versions["node"] as string,
		electron: process.versions["electron"] as string
	};

	return versions;
});
ipcMain.handle("request-is-dev", () => {
	return isDev;
});
ipcMain.on("request-error-simulation", (event, errorMessage) => {
	console.log(`Simulating error...`);
	event.sender.openDevTools();
	event.sender.send("error-thrown", "test", errorMessage);
})